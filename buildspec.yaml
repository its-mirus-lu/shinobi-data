version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  exported-variables:
    - imageTag
phases:
  
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # Query ECR to find out if a docker image already exists with the hash for the latest edits of this dockerfile
      - |
        last_hash_dockerfile=$(git log -n 1 --pretty=format:%H -- dockerfile)
        echo "Latest available dockerfile hash $last_hash_dockerfile"
        output=$(aws ecr describe-images --repository-name $REPOSITORY_NAME --image-ids imageTag=$last_hash_dockerfile --query 'imageDetails[].imageTags' --output text 2>&1)
        echo $output
        if [[ "$output" == *"$last_hash_dockerfile"* ]] && [[ "$output" != *"ImageNotFoundException"* ]]; then
            echo "image already exists"
            export DOCKER_IMAGE_ALREADY_BUILT=true
        else
            echo "image doesn't exist"
            export DOCKER_IMAGE_ALREADY_BUILT=false
        fi
      
  build:
    commands:
      - echo "Docker image already built? -> $DOCKER_IMAGE_ALREADY_BUILT"
      - |
        if [[ "$DOCKER_IMAGE_ALREADY_BUILT" == "false" ]]; then
            echo Build started on `date`
            echo Building the Docker image...
            docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION -t $REPOSITORY_URI:latest -f dockerfile .
        else
            echo "image exists"
        fi
      
  post_build:
    commands:
      - |
        if [[ "$DOCKER_IMAGE_ALREADY_BUILT" == "false" ]]; then
            echo Pushing the Docker image...
            docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
            docker push $REPOSITORY_URI:latest
            export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSIONÃ¥
        else
            echo "image exists"
        fi
      
  
      